[
	{
		"building_block_id": "Ryjz4XYea5bv4fRqjxq6sRKjMyYloc7biVB3ADGdr6NYS1rdYhK9cF1NGp3mktTW8123Wh31236coZSr5x4T1ooaXA117117",
		"building_block_category_id": "R6G24kzjyfthvmoHoIE9116123rgLuOWovEmI7QP60XdxoFd9CPGEbKM116DxrEvX2SWvxHvQnffrF1pa8MaPkEe9DUA117117",
		"name": "Basic Auth",
		"about": "Using Basic Authentication for security access to API resources.",
		"category_id": "200",
		"category": "Authorization & Authentication Formats",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "9Jq9wzpVu116iX7ohkFAMJ3tVjM1US091dsrrb4C8PGZTwwRCdAPOMuHhscgU9uZ0TivqjZ8wjwvNABzIXa8kMtw117117",
		"building_block_category_id": "R6G24kzjyfthvmoHoIE9116123rgLuOWovEmI7QP60XdxoFd9CPGEbKM116DxrEvX2SWvxHvQnffrF1pa8MaPkEe9DUA117117",
		"name": "OAuth",
		"about": "Using OAuth for authorization and access management for API resources.",
		"category_id": "200",
		"category": "Authorization & Authentication Formats",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "5RnZNAfPsFwyAGez07iXc9Gb3DPGQbaa123eH1X9hbrdI4eqCB9uIlHyOzXqL123HYnJQT68Y9YCS9jECrCV116I3csA117117",
		"building_block_category_id": "R6G24kzjyfthvmoHoIE9116123rgLuOWovEmI7QP60XdxoFd9CPGEbKM116DxrEvX2SWvxHvQnffrF1pa8MaPkEe9DUA117117",
		"name": "API Keys",
		"about": "Using API keys for securing access to API resources.",
		"category_id": "200",
		"category": "Authorization & Authentication Formats",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "JA7zw5dfY012qG8sBMFAaFpFVfX2u123rO8f3E7WzMpWUZmC29UwBpXBH0vKX4b7qQNAbwqpEk9ixdfAPikGZXOw117117",
		"building_block_category_id": "R6G24kzjyfthvmoHoIE9116123rgLuOWovEmI7QP60XdxoFd9CPGEbKM116DxrEvX2SWvxHvQnffrF1pa8MaPkEe9DUA117117",
		"name": "JSON Web Token",
		"about": "Using JSON web tokens for securing access to API resources.",
		"category_id": "200",
		"category": "Authorization & Authentication Formats",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "ZyFJk6Wvs70iS5va8fAbCKHYbL1wGkw8FnvuvAahsqobDZjr9QZUVuOAULVyQYmyfKQ9XF5CX9WDcsHwElK7hw117117",
		"building_block_category_id": "a48JyvJRFtyC1R1231JnhL9P2um2PXMGz1K9kZ3LXGKfWu29vTRD1KaypAP116KML1b0NkrLYNLz3R6kujkpF8wwYQ117117",
		"name": "Session Management",
		"about": "API should pass session-based authentication, either by establishing a session token via a POST or by using an API key as a POST body argument or as a cookie, avoiding putting usernames, passwords, session tokens, and API keys in the URL, as this can be captured in web server logs, which makes them intrinsically valuable.",
		"category_id": "201",
		"category": "Authorization & Authentication Considerations",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "FLaASAJRo6m29ZQwQOUfdwaLAebS4eBEjxl12366vBGbOmbuQz7ErMTa6Kh9OX13lv1163kA1LLLs4nn123116bZMFDG116Q117117",
		"building_block_category_id": "a48JyvJRFtyC1R1231JnhL9P2um2PXMGz1K9kZ3LXGKfWu29vTRD1KaypAP116KML1b0NkrLYNLz3R6kujkpF8wwYQ117117",
		"name": "Session State",
		"about": "Many web services are written to be as stateless as possible, usually ending up with a state blob being sent as part of the transaction.",
		"category_id": "201",
		"category": "Authorization & Authentication Considerations",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "ZR8htN1aUU8Tq6djD1JeVpBiQD64pfrQtTJPA6MzGCcBdnhEnmtNtvTwoh8C8Nl71116RJFXif9SZo123TZ5qhHBOg117117",
		"building_block_category_id": "a48JyvJRFtyC1R1231JnhL9P2um2PXMGz1K9kZ3LXGKfWu29vTRD1KaypAP116KML1b0NkrLYNLz3R6kujkpF8wwYQ117117",
		"name": "Anti-Farming",
		"about": "APIs are put up, and then farmed, such as a price matching website or aggregation service. There's no technical method of preventing this use, so strongly consider means to encourage it as a business model by making high velocity farming is possible for a fee, or contractually limiting service using terms and conditions. CAPTCHAs and similar methods can help reduce simpler adversaries, but not well funded or technically competent adversaries. Using mutually assured client side TLS certificates may be a method of limiting access to trusted organizations, but this is by no means certain, particularly if certificates are posted deliberately or by accident to the Internet.",
		"category_id": "201",
		"category": "Authorization & Authentication Considerations",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "XUTsTYNjkcTg8z2eZwNp9guu083gPgVFnDyXuoYP116Mmq1TRx3K02Jz2zSIgPJ8VdCQ123KjBMgoz9V4bYei116C88g117117",
		"building_block_category_id": "a48JyvJRFtyC1R1231JnhL9P2um2PXMGz1K9kZ3LXGKfWu29vTRD1KaypAP116KML1b0NkrLYNLz3R6kujkpF8wwYQ117117",
		"name": "Protect HTTP Methods",
		"about": "APIs often use GET (read), POST (create), PUT (replace/update) and DELETE (to delete a record). Not all of these are valid choices for every single resource collection, user, or action. Make sure the incoming HTTP method is valid for the session token/API key and associated resource collection, action, and record. For example, if you have an RESTful API for a library, it's not okay to allow anonymous users to DELETE book catalog entries, but it's fine for them to GET a book catalog entry. On the other hand, for the librarian, both of these are valid uses.",
		"category_id": "201",
		"category": "Authorization & Authentication Considerations",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "gAikZRwAzsVPPKQmaTI116RdeI9IFmX7GqHdd6123e242CEJueqAHhLhteq4BCSiOHqG116PQsynkrVM1Qu1162N116nkgcA117117",
		"building_block_category_id": "a48JyvJRFtyC1R1231JnhL9P2um2PXMGz1K9kZ3LXGKfWu29vTRD1KaypAP116KML1b0NkrLYNLz3R6kujkpF8wwYQ117117",
		"name": "Methods Whitelist",
		"about": "It is common with RESTful services to allow multiple methods for a given URL for different operations on that entity. For example, a GET request might read the entity while PUT would update an existing entity, POST would create a new entity, and DELETE would delete an existing entity. It is important for the service to properly restrict the allowable verbs such that only the allowed verbs would work, while all others would return a proper response code (for example, a 403 Forbidden).",
		"category_id": "201",
		"category": "Authorization & Authentication Considerations",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "bUknxof34tbp123yTJ0b2ndT116rFDBNovssY1162cnD12vgLsBGI9s4bIoKqPNudLEKpsGhYgQq0J9Py8oTqWROXkPw117117",
		"building_block_category_id": "a48JyvJRFtyC1R1231JnhL9P2um2PXMGz1K9kZ3LXGKfWu29vTRD1KaypAP116KML1b0NkrLYNLz3R6kujkpF8wwYQ117117",
		"name": "Cross-Site Request Forgery",
		"about": "For resources exposed by RESTful web services, it's important to make sure any PUT, POST, and DELETE request is protected from Cross Site Request Forgery. Typically one would use a token-based approach. See Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet for more information on how to implement CSRF-protection.",
		"category_id": "201",
		"category": "Authorization & Authentication Considerations",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "123Y0KFdS1164JxEDDtIAWfObozir6y8Flt0rkwdxevsCCeCFlonpMgF3HJfEZrwvfthH116wXkrLypaZ34116VqlLf0EA117117",
		"building_block_category_id": "a48JyvJRFtyC1R1231JnhL9P2um2PXMGz1K9kZ3LXGKfWu29vTRD1KaypAP116KML1b0NkrLYNLz3R6kujkpF8wwYQ117117",
		"name": "Insecure Direct Object References",
		"about": " It may seem obvious, but if you had a bank account REST web service, you'd have to make sure there is adequate checking of primary and foreign keys.",
		"category_id": "201",
		"category": "Authorization & Authentication Considerations",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "HnYrXwU78Ghg3QUXqbFXYBrJq123b7PIC55OobyEMD7iEcIzZ2pr80xcE123KJ5P8tr214Qn9k116uwpKCd1161230aOVnsA117117",
		"building_block_category_id": "nqHMMd3jtAHUEChGRzVE116WMUAKDyv0CTXWvAJWfGVlTRnjEWLKg2BOIcs6NIdlvBtvrHobalQ7q0cRiHgpng1A117117",
		"name": "Assist the User",
		"about": "Assisting the user makes the most sense, as the most common scenario is "problem exists between keyboard and computer" (PEBKAC). Help the user input high quality data into your web services, such as ensuring a Zip code makes sense for the supplied address, or the date makes sense. If not, reject that input. If they continue on, or it's a text field or some other difficult to validate field, input sanitization is a losing proposition but still better than XSS or SQL injection. If you're already reduced to sanitization or no input validation, make sure output encoding is very strong for your application.rn",
		"category_id": "202",
		"category": "Input Validation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "03116e4LYggkUXDVXysdYWEzSYRLvJeMMG123ezrIQNso7OLB4b7Cq906vpZ6mj7mHd123kZL1kXlyeBCq2ZhKZU9dGw117117",
		"building_block_category_id": "nqHMMd3jtAHUEChGRzVE116WMUAKDyv0CTXWvAJWfGVlTRnjEWLKg2BOIcs6NIdlvBtvrHobalQ7q0cRiHgpng1A117117",
		"name": "Secure Parsing",
		"about": "Use a secure parser for parsing the incoming messages. If you are using XML, make sure to use a parser that is not vulnerable to XXE and similar attacks.rn",
		"category_id": "202",
		"category": "Input Validation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "SezxjtRyddKUwujvnIirFUO116bsIJkgcs35tgOAaBVbMWuzZ3Mc2p8123alh4NP3R7ZG0GC22DjkNcyNGVITdQp3g117117",
		"building_block_category_id": "nqHMMd3jtAHUEChGRzVE116WMUAKDyv0CTXWvAJWfGVlTRnjEWLKg2BOIcs6NIdlvBtvrHobalQ7q0cRiHgpng1A117117",
		"name": "Strong Typing",
		"about": "It's difficult to perform most attacks if the only allowed values are true or false, or a number, or one of a small number of acceptable values. Strongly type incoming data as quickly as possible.rn",
		"category_id": "202",
		"category": "Input Validation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "COnVQRvDIYImPG1163C2KwRdODJXTBGTrIdmsjzf544EYZTHrpZtVi1167TiwW116h2R123PBlkorU116OyJ98YMekRGEASw117117",
		"building_block_category_id": "nqHMMd3jtAHUEChGRzVE116WMUAKDyv0CTXWvAJWfGVlTRnjEWLKg2BOIcs6NIdlvBtvrHobalQ7q0cRiHgpng1A117117",
		"name": "Validate Content-Types",
		"about": "When POSTing or PUTting new data, the client will specify the Content-Type (e.g. application/xml or application/json) of the incoming data. The server should never assume the Content-Type; it should always check that the Content-Type header and the content are the same type. A lack of Content-Type header or an unexpected Content-Type header should result in the server rejecting the content with a 406 Not Acceptable response.rn",
		"category_id": "202",
		"category": "Input Validation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "6116tDI673x1234wMw1T0VkTETeOkXgDxTHmGpe4MuYJLL3qlCfJopmrkOdJy123nKMqkCBTiMrOdzGNjjUoLXzRgt9w117117",
		"building_block_category_id": "nqHMMd3jtAHUEChGRzVE116WMUAKDyv0CTXWvAJWfGVlTRnjEWLKg2BOIcs6NIdlvBtvrHobalQ7q0cRiHgpng1A117117",
		"name": "Validate Response Types",
		"about": "It is common for REST services to allow multiple response types (e.g. application/xml or application/json, and the client specifies the preferred order of response types by the Accept header in the request. Do NOT simply copy the Accept header to the Content-type header of the response. Reject the request (ideally with a 406 Not Acceptable response) if the Accept header does not specifically contain one of the allowable types. Because there are many MIME types for the typical response types, it's important to document for clients specifically which MIME types should be used.rn",
		"category_id": "202",
		"category": "Input Validation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "eYCoR6zRSKyMvqqdXpQYTJI197eZIKT71n1xsumFjtMUvD61165QFwgijXGEilbR063RJGo0q4s1IDTn123GiIubog117117",
		"building_block_category_id": "nqHMMd3jtAHUEChGRzVE116WMUAKDyv0CTXWvAJWfGVlTRnjEWLKg2BOIcs6NIdlvBtvrHobalQ7q0cRiHgpng1A117117",
		"name": "JSON Validation",
		"about": "Making sure all JSON is valid helps make sure that APIs are operating as expectation and making sure vulnerabilities are not being passed in with API requests and responses. ",
		"category_id": "202",
		"category": "Input Validation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "RIU4EG0Xx6tV116dIlmvOovisr3AYJKz6WAYlt8NJm1238n4LzV21238YKQeGjHrMFUeTX1235VpOAKGVmaqjjPbHu8Vww117117",
		"building_block_category_id": "nqHMMd3jtAHUEChGRzVE116WMUAKDyv0CTXWvAJWfGVlTRnjEWLKg2BOIcs6NIdlvBtvrHobalQ7q0cRiHgpng1A117117",
		"name": "XML Validation",
		"about": "XML-based services must ensure that they are protected against common XML based attacks by using secure XML-parsing. This typically means protecting against XML External Entity attacks, XML-signature wrapping etc.n",
		"category_id": "202",
		"category": "Input Validation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "U4orBzIclTq4116q37D5SZonrWce4CfGIdc116lo7ZXzl83O42nJApoMKhaIi3lXLYO123uWmZkEbNp4bG1vzvaRcU7Q117117",
		"building_block_category_id": "nqHMMd3jtAHUEChGRzVE116WMUAKDyv0CTXWvAJWfGVlTRnjEWLKg2BOIcs6NIdlvBtvrHobalQ7q0cRiHgpng1A117117",
		"name": "Framework-Provided Validation",
		"about": "Many frameworks, such as Jersey, allow for validation constraints to be enforced automatically by the framework at request or response time. (See Bean Validation Support for more information). While this does not validate the structure of JSON or XML data before being unmarshaled, it does provide automatic validation after unmarshaling, but before the data is presented to the application.rn",
		"category_id": "202",
		"category": "Input Validation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "mFqKmBQ123ypZLKoPCwV6o6123WbAIoA7YB2QltZ2h55v4rkHYZRsBwcTUK116UFor3N7DLpRpJZMGEzZhoGDHEzEoGQ117117",
		"building_block_category_id": "w7Q810HvxrF11vDiK3PzhKUaIMBv3aaWUecPs72BlUfhZx21123qwFu3frh0lKqTLHAlRYa123tkEoMp9FRb6fDdaw117117",
		"name": "Send Security Headers",
		"about": "To make sure the content of a given resources is interpreted correctly by the browser, the server should always send the Content-Type header with the correct Content-Type, and preferably the Content-Type header should include a charset. The server should also send an X-Content-Type-Options: nosniff to make sure the browser does not try to detect a different Content-Type than what is actually sent (can lead to XSS).rn",
		"category_id": "203",
		"category": "Output Validation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "ylZJ3sxPvOshw6lFbh5zvYqGncOR2Q7q5g123vmoTKKBO63RvZMV3J116123ecCzTe1N123vUbM116vtAIrXD4c123j6Qc116E1w117117",
		"building_block_category_id": "w7Q810HvxrF11vDiK3PzhKUaIMBv3aaWUecPs72BlUfhZx21123qwFu3frh0lKqTLHAlRYa123tkEoMp9FRb6fDdaw117117",
		"name": "JSON Encoding",
		"about": "A key concern with JSON encoders is preventing arbitrary JavaScript remote code execution within the browser... or, if you're using node.js, on the server. It's vital that you use a proper JSON serializer to encode user-supplied data properly to prevent the execution of user-supplied input on the browser.rn",
		"category_id": "203",
		"category": "Output Validation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "tQxJxFZSsio116d123l123iGJ116b1FL83MMas91VR1Aihh77TJ6o4icHrgmaLb96XGaLf4exdF5Mj3m7jr5116bIovM2rPg117117",
		"building_block_category_id": "w7Q810HvxrF11vDiK3PzhKUaIMBv3aaWUecPs72BlUfhZx21123qwFu3frh0lKqTLHAlRYa123tkEoMp9FRb6fDdaw117117",
		"name": "XML Encoding",
		"about": "XML should never be built by string concatenation. It should always be constructed using an XML serializer. This ensures that the XML content sent to the browser is parseable and does not contain XML injection. For more information, please see the Web Service Security Cheat Sheet.rn",
		"category_id": "203",
		"category": "Output Validation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "7N12Qi2hur9xrwpsBSitw3ayZy5D0lalwQVo6Xc81166P1239iZ116So1b8m1bNMm123JcTuu5KSaTGnpsBTys123obsGrlQ117117",
		"building_block_category_id": "w7Q810HvxrF11vDiK3PzhKUaIMBv3aaWUecPs72BlUfhZx21123qwFu3frh0lKqTLHAlRYa123tkEoMp9FRb6fDdaw117117",
		"name": "Link Integrity",
		"about": "Checks the reputation of web links in real time, providing an invisibly secure experience by blocking malicious and unwanted links from loading. Checking the reputation of http requests in real time, warning consumers of potential threats before allowing known malicious web pages (or other resources) from loading.rn",
		"category_id": "203",
		"category": "Output Validation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "b4FIK4i51vlcaL7xsWgoThiG7oAfPjKx123hV6ki2lmFuxNGma7wgUuz123mbHV0tmUdEfG4pbuAxWeL1239onyEmuVQ117117",
		"building_block_category_id": "123PEjeTUmEWyeOzYMtzFRYQYnZmHkun12323Diqy2xuqih5dyQhmo72rrOf8B8J5ibmxvdN64Nnme3wr5noAminYw117117",
		"name": "Data in Transit",
		"about": "Unless the public information is completely read-only, the use of TLS should be mandated, particularly where credentials, updates, deletions, and any value transactions are performed. The overhead of TLS is negligible on modern hardware, with a minor latency increase that is more than compensated by safety for the end user.rn",
		"category_id": "204",
		"category": "Cryptography",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "7yRNN123MpjbHzrH0KYaQOaHiOZdFRawQqvztNMKAxDqOCDd0gpSuWv3nBKtABFpn5AGwEnjtxoi9sQhG6hG123Zcw117117",
		"building_block_category_id": "qnoFOMaxzT116HQoknicwvpnUZayTxbiHVqpBps9de6gJaapAEG5yhtSCaUdhgyiRVSja116J5qycHyftCLDpwmIyg117117",
		"name": "Buffer Overflow Attack",
		"about": "Buffer overflow errors are characterized by the overwriting of memory fragments of the process, which should have never been modified intentionally or unintentionally. Overwriting values of the IP (Instruction Pointer), BP (Base Pointer) and other registers causes exceptions, segmentation faults, and other errors to occur. Usually these errors end execution of the application in an unexpected way. Buffer overflow errors occur when we operate on buffers of char type. - https://www.owasp.org/index.php/Buffer_overflow_attackrn",
		"category_id": "205",
		"category": "Abuse of Functionality",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "2mYjGpSckvzPLOc5kLT8QFFQVilwtXxvnKxn6UxQo7D028ahkWL8lNGXoUjm4ifZiljtFGO5902Yt8Y3gv4MNA117117",
		"building_block_category_id": "qnoFOMaxzT116HQoknicwvpnUZayTxbiHVqpBps9de6gJaapAEG5yhtSCaUdhgyiRVSja116J5qycHyftCLDpwmIyg117117",
		"name": "Buffer Overflow via Environment Variables",
		"about": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables. - https://www.owasp.org/index.php/Buffer_Overflow_via_Environment_Variablesrn",
		"category_id": "205",
		"category": "Abuse of Functionality",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "123wRIjWfToN9XZ6K6BdVKUqM123DO8bFaAhzgorENhfUd1ITYr0gRbttKz8123KuxyoHvStP7xE2123qOkfPrOS9rbBXQ117117",
		"building_block_category_id": "qnoFOMaxzT116HQoknicwvpnUZayTxbiHVqpBps9de6gJaapAEG5yhtSCaUdhgyiRVSja116J5qycHyftCLDpwmIyg117117",
		"name": "Overflow Binary Resource File",
		"about": "The source of a buffer overflow may be input data. When it comes from the Overflow Binary Resource File, the attacker has to modify/prepare the binary file in such a way that the application, after reading this file, has become prone to a classic Buffer overflow attack. The only difference between this attack and the classic one is the source of the input data. Common examples are specially crafted MP3, JPEG or ANI files, which cause buffer overflows. - https://www.owasp.org/index.php/Overflow_Binary_Resource_Filern",
		"category_id": "205",
		"category": "Abuse of Functionality",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "tefYoOSX0qAHcJGDXw99rwH0Np99txN5VRT654nxTAuZB4i6Pw8e116sspBiRN8irRG9123flgKEeZAUWsDyM8xTjQ117117",
		"building_block_category_id": "37IYQy8nmKphS123EXKdFZGk6Jn5SovdhVcMqFNwEJIiEETsMe2j116lw2j4jT5bN123YJyDfehLlM1233NAAh75VSrGGQ117117",
		"name": "Cross-Site Request Forgery (CSRF)",
		"about": "Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker's choosing. If the victim is a normal user, a successful CSRF attack can force the user to perform state changing requests like transferring funds, changing their email address, and so forth. If the victim is an administrative account, CSRF can compromise the entire web application. - https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)rn",
		"category_id": "206",
		"category": "Data Structure Attacks",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "pvE116ZhM391162HqVf123T123116EIFfsmuS116eIMZasf66S0gP9fqqRiN116ZBkLcjJ5H3OFeG3Ucrzc4tgGSQkB47eCgMpbg117117",
		"building_block_category_id": "37IYQy8nmKphS123EXKdFZGk6Jn5SovdhVcMqFNwEJIiEETsMe2j116lw2j4jT5bN123YJyDfehLlM1233NAAh75VSrGGQ117117",
		"name": "Logic/time Bomb",
		"about": "A logic bomb is a piece of malicious code that executes when specific trigger conditions are met. A typical example would be a program that monitors a company's payroll system, and attacks the company if a specific employee is terminated. A time bomb is a type of logic bomb that uses a date and time as its trigger condition. They are differentiated from software "easter eggs" by their malicious nature. - https://www.owasp.org/index.php/Logic/time_bombrn",
		"category_id": "206",
		"category": "Data Structure Attacks",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "123FFUo4tMZqyHc2XrNmEeSwQOk7mp5R1S116z116z6viYO2QQDVir0uEdnBVZ0CpnMbwvs0Wz1g4tHcikRfSQZWBu2w117117",
		"building_block_category_id": "37IYQy8nmKphS123EXKdFZGk6Jn5SovdhVcMqFNwEJIiEETsMe2j116lw2j4jT5bN123YJyDfehLlM1233NAAh75VSrGGQ117117",
		"name": "Trojan Horse",
		"about": "A Trojan Horse is a program that uses malicious code masqueraded as a trusted application. The malicious code can be injected on benign applications, masqueraded in e-mail links, or sometimes hidden in JavaScript pages to make furtive attacks against vulnerable internet Browsers. - https://www.owasp.org/index.php/Trojan_Horsern",
		"category_id": "206",
		"category": "Data Structure Attacks",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "WyAOZpOh7r116k9fD4VaMroays6yeXW116DXT33TmLpVjm4DVBD69VO12iEY123syn7IWsQo3oi4QDsV92Ad5p9h0QIg117117",
		"building_block_category_id": "37IYQy8nmKphS123EXKdFZGk6Jn5SovdhVcMqFNwEJIiEETsMe2j116lw2j4jT5bN123YJyDfehLlM1233NAAh75VSrGGQ117117",
		"name": "Account Lockout Attack",
		"about": "In an account lockout attack, an attacker attempts to lock out user accounts by purposely failing the authentication process as many times as needed to trigger the account lockout functionality. This in turn prevents even the valid user from obtaining access to their account. For example, if an account lockout policy states that users are locked out of their accounts after three failed login attempts, an attacker can lock out accounts by deliberately sending an invalid password three times. On a large scale, this attack can be used as one method in launching a denial of service attack on many accounts. The impact of such an attack is compounded when there is a significant amount of work required to unlock the accounts to allow users to attempt to authenticate again. - https://www.owasp.org/index.php/Account_lockout_attackrn",
		"category_id": "206",
		"category": "Data Structure Attacks",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "pQ9QHIB5PDA116q1sd395aTeRVwXN1slABH116BcDCpknQ7bTbcAl19vO123edIEqDd7qs9oMgIbOcyD81Rj1ru116AuZQ117117",
		"building_block_category_id": "37IYQy8nmKphS123EXKdFZGk6Jn5SovdhVcMqFNwEJIiEETsMe2j116lw2j4jT5bN123YJyDfehLlM1233NAAh75VSrGGQ117117",
		"name": "Cross-Site Request Forgery (CSRF)",
		"about": "Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker's choosing. If the victim is a normal user, a successful CSRF attack can force the user to perform state changing requests like transferring funds, changing their email address, and so forth. If the victim is an administrative account, CSRF can compromise the entire web application. - https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)rn",
		"category_id": "206",
		"category": "Data Structure Attacks",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "dGsmrvPVBNeltU0ITzVWI8TWCLl9NynhNm116cOhz116sYnQdLf0RKFl0FIAVpJGM2HxpP1qAV9fQc9Xb5116EFTQMvg117117",
		"building_block_category_id": "37IYQy8nmKphS123EXKdFZGk6Jn5SovdhVcMqFNwEJIiEETsMe2j116lw2j4jT5bN123YJyDfehLlM1233NAAh75VSrGGQ117117",
		"name": "Execution After Redirect (EAR)",
		"about": "Execution After Redirect (EAR) is an attack where an attacker ignores redirects and retrieves sensitive content intended for authenticated users. A successful EAR exploit can lead to complete compromise of the application. - https://www.owasp.org/index.php/Execution_After_Redirect_(EAR)rn",
		"category_id": "206",
		"category": "Data Structure Attacks",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "kXNBhDIjEPFe116s3Y4HdWKFwKL34u5e2GUQamIpRZx9Kyk123116WdYZK123cYGK779oIhAG7zGs9cGJJ9y116DJ9O7VcqQ117117",
		"building_block_category_id": "37IYQy8nmKphS123EXKdFZGk6Jn5SovdhVcMqFNwEJIiEETsMe2j116lw2j4jT5bN123YJyDfehLlM1233NAAh75VSrGGQ117117",
		"name": "Session Fixation",
		"about": null,
		"category_id": "206",
		"category": "Data Structure Attacks",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "XUM8DbusZYB5VbVDuOGp63ghNtou7EMmNLZTJmDsKkAQCIpdyvF4GEOlqS5qi7kYlIuRLJ36RrM1KFDZiUHMqg117117",
		"building_block_category_id": "37IYQy8nmKphS123EXKdFZGk6Jn5SovdhVcMqFNwEJIiEETsMe2j116lw2j4jT5bN123YJyDfehLlM1233NAAh75VSrGGQ117117",
		"name": "Session Hijacking Attack",
		"about": null,
		"category_id": "206",
		"category": "Data Structure Attacks",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "A5mv116qhbEGGrpWY7urLGgRaJVnTUwlrAcHpjB123zpx8YMbgx1116iwkCbkZz116116nKPIoy8EZR123eeCkZlbLzUUtaxEg117117",
		"building_block_category_id": "37IYQy8nmKphS123EXKdFZGk6Jn5SovdhVcMqFNwEJIiEETsMe2j116lw2j4jT5bN123YJyDfehLlM1233NAAh75VSrGGQ117117",
		"name": "Session Prediction",
		"about": "The session prediction attack focuses on predicting session ID values that permit an attacker to bypass the authentication schema of an application. By analyzing and understanding the session ID generation process, an attacker can predict a valid session ID value and get access to the application. In the first step, the attacker needs to collect some valid session ID values that are used to identify authenticated users. Then, he must understand the structure of session ID, the information that is used to create it, and the encryption or hash algorithm used by application to protect it. Some bad implementations use sessions IDs composed by username or other predictable information, like timestamp or client IP address. In the worst case, this information is used in clear text or coded using some weak algorithm like base64 encoding. In addition, the attacker can implement a brute force technique to generate and test different values of session ID until he successfully gets access to the application.",
		"category_id": "206",
		"category": "Data Structure Attacks",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "RudazNvMri0116xu0ErSbM3mrP8yl89116lFEEL116jAOX7vICDXzcgx582n123Kz0rPS123i1LYphGHyxdYCGAlAp1U2C6A117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Blind SQL Injection",
		"about": "Blind SQL (Structured Query Language) injection is a type of SQL Injection attack that asks the database true or false questions and determines the answer based on the applications response. This attack is often used when the web application is configured to show generic error messages, but has not mitigated the code that is vulnerable to SQL injection. When an attacker exploits SQL injection, sometimes the web application displays error messages from the database complaining that the SQL Query's syntax is incorrect. Blind SQL injection is nearly identical to normal SQL Injection, the only difference being the way the data is retrieved from the database. When the database does not output data to the web page, an attacker is forced to steal data by asking the database a series of true or false questions. This makes exploiting the SQL Injection vulnerability more difficult, but not impossible. - https://www.owasp.org/index.php/Blind_SQL_Injectionrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "7fh07etankqce1IAbgxfn771N65eZWYVLhDdtHZ123f123MSxVSi1163mEglB7pzs5116R2123UcVwLFiFXu123jxxRn123eRXdQ117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Blind XPath Injection",
		"about": "XPath is a type of query language that describes how to locate specific elements (including attributes, processing instructions, etc.) in an XML document. Since it is a query language, XPath is somewhat similar to Structured Query Language (SQL), however, XPath is different in that it can be used to reference almost any part of an XML document without access control restrictions. In SQL, a "user" (which is a term undefined in the XPath/XML context) may be restricted to certain databases, tables, columns, or queries. Using an XPATH Injection attack, an attacker is able to modify the XPATH query to perform an action of his choosing. - https://www.owasp.org/index.php/Blind_XPath_Injectionrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "SBC8MhYEJowm8ZzqliNqXnnQ116gLa9jyfUgzbbBuDIY123EIB1E3VMqgB7NZY3C5xJZ7a116y3Va116Rzg6Q3xuWswn4A117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Code Injection",
		"about": "Code Injection is the general term for attack types which consist of injecting code that is then interpreted/executed by the application. This type of attack exploits poor handling of untrusted data. These types of attacks are usually made possible due to a lack of proper input/output data validation, for example: allowed characters (standard regular expressions classes or custom), data format, and amount of expected data. Code Injection differs from Command Injection in that an attacker is only limited by the functionality of the injected language itself. If an attacker is able to inject PHP code into an application and have it executed, he is only limited by what PHP is capable of. Command injection consists of leveraging existing code to execute commands, usually within the context of a shell. - https://www.owasp.org/index.php/Code_Injectionrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "xQLzeS4r116vDqK6XuMC123PjLJ4Er9RKFEiJEoVQ2RZ2kBiPPiEfNAX886gn44rD9QEUpvYEQCh88OcaTbudkjLfw117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Command Injection",
		"about": "Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation. This attack differs from Code Injection, in that code injection allows the attacker to add his own code that is then executed by the application. In Code Injection, the attacker extends the default functionality of the application without the necessity of executing system commands. - https://www.owasp.org/index.php/Command_Injectionrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "4RO9id6K5V123Di7lmzWfswTmiZPf04ZjemWsML3dNeNvQGNZFsXgHpMwwhwxes7uuRIUCa04Hfrg123cqe66mF5hg117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Comment Injection Attack",
		"about": "Comments injected into an application through input can be used to compromise a system. As data is parsed, an injected/malformed comment may cause the process to take unexpected actions that result in an attack. - https://www.owasp.org/index.php/Comment_Injection_Attackrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "pZPQsIrNhfldShJoDjkDx6BfJdAhqt1i116g123UKvheAlMZOtFC6V6WRr6kkk3IFsWsRNaNOz6ETPyp1QMSif4ZQQ117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Content Security Policy",
		"about": "Is an W3C specification offering the possbility to instruct the client browser from which location and/or which type of resources are allowed to be loaded. To define a loading behavior, the CSP specification use "directive" where a directive defines a loading behavior for a target resource type. - https://www.owasp.org/index.php/Content_Security_Policyrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "F4ebRRAsabXQplG4NRktJVPvZsS9c116OCGBzyuWeJqQGndHdxZCWPQB1Cd6FMVizLBhqCW4XX6hoz1iLZpeLr1g117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Content Spoofing",
		"about": "Content spoofing, also referred to as content injection or virtual defacement, is an attack targeting a user made possible by an injection vulnerability in a web application. When an application does not properly handle user supplied data, an attacker can supply content to a web application, typically via a parameter value, that is reflected back to the user. This presents the user with a modified page under the context of the trusted domain. This attack is typically used as, or in conjunction with, social engineering because the attack is exploiting a code-based vulnerability and a user's trust. - https://www.owasp.org/index.php/Content_Spoofingrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "IPnE9EqLA123ELyv116voiN5CmwG6nUcpo76QbV6q1RvXbjKiUCJwHrLQUmCRBix3yzxUmTdPii0DrhU0C9wTAqYjg117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "CORS RequestPreflighScrutiny",
		"about": "Is an feature offering the possbility to: A web application to expose resources to all or restricted domain, A web client to made AJAX request for resource on other domain than is source domain. This article will focus on HTTP Request Preflight feature proposed by CORS W3C specification and (mainly) how to setup a protection, on web application side, against CORS HTTP request that try to bypass the preflight process. - https://www.owasp.org/index.php/CORS_RequestPreflighScrutinyrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "neoa116u24hYagfeEjz3Dco123P123owfTqxrImQXyXjB3TpGetc572uZ8rCw1PvtggoVZ123ckYxcBea116hHYNvc625Afg117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Cross-site Scripting (XSS)",
		"about": null,
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "QXxnBK9SNwEB8IawdCGH1RdrLqUvdM116u58qL2jsckFsIrceExqZbqaqD5tJgVaBClF90P123rW0Gsr99116A1vy116KA117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Custom Special Character Injection",
		"about": "The software does not properly filter or quote special characters or reserved words that are used in a custom or proprietary language or representation that is used by the product. That allows attackers to modify the syntax, content, or commands before they are processed by the end system. - https://www.owasp.org/index.php/Custom_Special_Character_Injectionrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "zHbCsxbx116a40VlqlqNpl6116W86Q116h7UZq1Vaj4LJ6B1L123JW7wfEFSS8AfBP8ehdnxRUnyudAxnIo1168K0116VnMbrw117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Direct Dynamic Code Evaluation",
		"about": "This attack consists of a script that does not properly validate user inputs in the page parameter. A remote user can supply a specially crafted URL to pass arbitrary code to an eval() statement, which results in code execution. This attack will execute the code with the same permission like the target web service, including operation system commands. Eval injection is prevalent in handler/dispatch procedures that might want to invoke a large number of functions, or set a large number of variables. - https://www.owasp.org/index.php/Direct_Dynamic_Code_Evaluation_(%27Eval_Injection%27)rn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "9AIO116OtY7116lrk116ay123Xshrq2B3116Kb123U5lDdlDP6GJyjbJ6RgtRtSYyQk4X6Y0VinPFPLyzzSXz5YPnSof6gemvQ117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Format String Attack",
		"about": "The Format String exploit occurs when the submitted data of an input string is evaluated as a command by the application. In this way, the attacker could execute code, read the stack, or cause a segmentation fault in the running application, causing new behaviors that could compromise the security or the stability of the system. - https://www.owasp.org/index.php/Format_string_attackrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "qIqwg0r7hrqzljtV6Nu60q5erwyOrCvF1232HkiuZkw43M2eDijGAWhV9L67nhJw24SumL0Bn2116QUpwjO5XcRVjA117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Full Path Disclosure",
		"about": "Full Path Disclosure (FPD) vulnerabilities enable the attacker to see the path to the webroot/file. e.g.: /home/omg/htdocs/file/. Certain vulnerabilities, such as using the load_file() (within a SQL Injection) query to view the page source, require the attacker to have the full path to the file they wish to view. - https://www.owasp.org/index.php/Full_Path_Disclosurern",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "116KEeRcUfugX1t3UYqe1MTQRoBoM9JHrEybBuaR3b3Gz116E0RtQL8vu1zV6W116UgIaH44lvz1NwaSwx8Ku1160Gf7ig117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "LDAP Injection",
		"about": null,
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "yzK4tZS0O4HPq4txcvV1wUue4KrdG7tl2mjitkPlALbw8123kWHWWAdP7fku7SBfUSYNULqV5kkqT5cFYs4i5rvQ117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Parameter Delimiter",
		"about": "This attack is based on the manipulation of parameter delimiters used by web application input vectors in order to cause unexpected behaviors like access control and authorization bypass and information disclosure, among others. -  - https://www.owasp.org/index.php/Parameter_Delimiterrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "Vssn9nszUHYCmAKl33NCTqbhQlXo5wOPJaFMG9123zBLfEaQ13GUe4YfhXnnRywWZnLri0OXrGNX73YoMqbvikeQ117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "PHP Object Injection",
		"about": "PHP Object Injection is an application level vulnerability that could allow an attacker to perform different kinds of malicious attacks, such as Code Injection, SQL Injection, Path Traversal and Application Denial of Service, depending on the context. The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope. - https://www.owasp.org/index.php/PHP_Object_Injectionrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "thfLp0T6R2HeEvULBYAYQzMmKtN7h9skXXmMFHXxxsuYB3JKKL0n116gRVy5xcGf1AWYYTo8ns6SmD6bSa76s99g117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Regular Expression Denial of Service (ReDoS)",
		"about": " The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time. - https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoSrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "JygF11G0116zLW116QUlQgcvPgiWSV116jtAMCmvIfMNy2VH6CO116gBPvzDO56aereQhmWdN45RKBKeXo123gRJ1HEAM9Ow117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Resource Injection",
		"about": "This attack consists of changing resource identifiers used by an application in order to perform a malicious task. When an application permits a user input to define a resource, like a file name or port number, this data can be manipulated to execute or access different resources. In order to be properly executed, the attacker must have the possibility to specify a resource identifier through the application form and the application must permit its execution. The resource type affected by user input indicates the content type that may be exposed. For example, an application that permits input of special characters like period, slash, and backslash is risky when used in methods that interact with the file system. The resource injection attack focuses on accessing other resources than the local filesystem, which is different attack technique known as a Path Manipulation attack. - https://www.owasp.org/index.php/Resource_Injectionrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "3e2NfGJ9YRRQckgJZwn8rXCE3OEde116RhBc2eBLl116gxwovmYM4123ujURik20Qn123vb25TsaxwxsoT2P2Ow4lT116HoQ117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Server-Side Includes (SSI) Injection",
		"about": "SSIs are directives present on Web applications used to feed an HTML page with dynamic contents. They are similar to CGIs, except that SSIs are used to execute some actions before the current page is loaded or while the page is being visualized. In order to do so, the web server analyzes SSI before supplying the page to the user. The Server-Side Includes attack allows the exploitation of a web application by injecting scripts in HTML pages or executing arbitrary codes remotely. It can be exploited through manipulation of SSI in use in the application or force its use through user input fields. It is possible to check if the application is properly validating input fields data by inserting characters that are used in SSI directives - https://www.owasp.org/index.php/Server-Side_Includes_(SSI)_Injectionrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "EOhUGSaTOPC1163x2WtxffWroQnN5DXa1K5rTHpRpfsZBT6qu0NBQg084cWrzgnfdhi3G6C1164CYKLXtzbbSADw9w117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Special Element Injection",
		"about": "Special Element Injection is a type of injection attack that exploits a weakness related to reserved words and special characters. Every programming language and operating system has special characters considered as reserved words for it. However, when an application receives such data as user input, it is possible to observe unexpected behavior in the application when parsing this information. This can lead to information disclosure, access control and authorization bypass, code injection, and many other variants. According to the characters used, the Special Element Injection attack can be performed using macro symbols, parameter delimiter and null characters/null bytes, among others. - https://www.owasp.org/index.php/Special_Element_Injectionrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "DEssZjYSfYsK9cpsd9wEjlHtxy959tem9Rd6E3JzDEgfUuXxBLcH06GMKgb0hWO22Of6wwLLEy1235r4A51jQiFQ117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "SQL Injection",
		"about": "A SQL injection attack consists of insertion or "injection" of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL commands are injected into data-plane input in order to effect the execution of predefined SQL commands - https://www.owasp.org/index.php/SQL_Injectionrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "Wm4yQjQQZm5aBg7qGWGghORPNeRJzjQdGVVcqtUbXdPgnOT9debP2rql4naf6mPFaaf21oInE8ByEwDbrFA123Fw117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "Web Parameter Tampering",
		"about": "The Web Parameter Tampering attack is based on the manipulation of parameters exchanged between client and server in order to modify application data, such as user credentials and permissions, price and quantity of products, etc. Usually, this information is stored in cookies, hidden form fields, or URL Query Strings, and is used to increase application functionality and control. This attack can be performed by a malicious user who wants to exploit the application for their own benefit, or an attacker who wishes to attack a third-person using a Man-in-the-middle attack. In both cases, tools likes Webscarab and Paros proxy are mostly used. The attack success depends on integrity and logic validation mechanism errors, and its exploitation can result in other consequences including XSS, SQL Injection, file inclusion, and path disclosure attacks. - https://www.owasp.org/index.php/Web_Parameter_Tamperingrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "FlrvSlvnhdiEJzvuiECUzoOL123oyE7vp0x5E116UAy2CehZJ64HRz2giacdaDPSa3116sjaMReBO47GR0GghqDnKwJQ117117",
		"building_block_category_id": "hteWqsXv5wyqmrsNSbNPZXLsfo5jxbasBKEjGkiaj116Vk4xR4RFLiqTN2U29GY2k3CmHGILPQguDo124bfyeZ7A117117",
		"name": "XPATH Injection",
		"about": "Similar to SQL Injection, XPath Injection attacks occur when a web site uses user-supplied information to construct an XPath query for XML data. By sending intentionally malformed information into the web site, an attacker can find out how the XML data is structured, or access data that he may not normally have access to. He may even be able to elevate his privileges on the web site if the XML data is being used for authentication (such as an XML based user file). Querying XML is done with XPath, a type of simple descriptive statement that allows the XML query to locate a piece of information. Like SQL, you can specify certain attributes to find, and patterns to match. When using XML for a web site it is common to accept some form of input on the query string to identify the content to locate and display on the page. This input must be sanitized to verify that it doesn't mess up the XPath query and return the wrong data. XPath is a standard language; its notation/syntax is always implementation independent, which means the attack may be automated. There are no different dialects as it takes place in requests to the SQL databases - https://www.owasp.org/index.php/XPATH_Injectionrn",
		"category_id": "207",
		"category": "Embedded Malicious Code",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "44ELlRb5D1wj1Wwkz3i3pcZerSdRUwI2u8lzsYkDiO98q2Hsp4aJqXtTYWCfdDouNRZQsU0x2KbxSCklZbtZGA117117",
		"building_block_category_id": "S1DW7116ml6QUX3116FFK4LjSR8uxd19U9Qx3Yr0iEK69nCoxtVbLMqWvnGsFwJ9B123UlglRtthC5BvkFRP1SxO4HYw117117",
		"name": "Brute Force Attack",
		"about": "A brute force attack can manifest itself in many different ways, but primarily consists in an attacker configuring predetermined values, making requests to a server using those values, and then analyzing the response. For the sake of efficiency, an attacker may use a dictionary attack (with or without mutations) or a traditional brute-force attack (with given classes of characters e.g.: alphanumerical, special, case (in)sensitive). Considering a given method, number of tries, efficiency of the system which conducts the attack, and estimated efficiency of the system which is attacked the attacker is able to calculate approximately how long it will take to submit all chosen predetermined values. - https://www.owasp.org/index.php/Brute_force_attackrn",
		"category_id": "208",
		"category": "Injection",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "aus0P2y116HhXT0aLOyx7epIFithqLtoeNG1jBd39LEeeqtcDYpQ2dbhIZew0Z1161oKRliycduqAEk1164FFPpgiHig117117",
		"building_block_category_id": "S1DW7116ml6QUX3116FFK4LjSR8uxd19U9Qx3Yr0iEK69nCoxtVbLMqWvnGsFwJ9B123UlglRtthC5BvkFRP1SxO4HYw117117",
		"name": "Cash Overflow",
		"about": "A Cash Overflow attack is a Denial of Service attack specifically aimed at exceeding the hosting costs for a cloud application, either essentially bankrupting the service owner or exceeding the application cost limits, leading the cloud service provider to disable the application. - https://www.owasp.org/index.php/Cash_Overflowrn",
		"category_id": "208",
		"category": "Injection",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "FkZr2RJ0tPgdUGr0xoFn2LwQytJTUgAysCJ5iIBVo3CKvGeFmsA8MZwpHU5l6gRRaRylpxIfDMJJxBXmV2dAjg117117",
		"building_block_category_id": "S1DW7116ml6QUX3116FFK4LjSR8uxd19U9Qx3Yr0iEK69nCoxtVbLMqWvnGsFwJ9B123UlglRtthC5BvkFRP1SxO4HYw117117",
		"name": "Cryptanalysis ",
		"about": "Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break - Finding the secret key., Gobal Deduction - Finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key.rn",
		"category_id": "208",
		"category": "Injection",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "IMSHafHECrsCm5rnXQSaaOqnOYbug116L53PMHXyWNirUiWxzpuTXX4gDMQfY1XzbKd116wnPKPaiFJibh6jakYGbA117117",
		"building_block_category_id": "S1DW7116ml6QUX3116FFK4LjSR8uxd19U9Qx3Yr0iEK69nCoxtVbLMqWvnGsFwJ9B123UlglRtthC5BvkFRP1SxO4HYw117117",
		"name": "Denial of Service",
		"about": " The Denial of Service (DoS) attack is focused on making a resource (site, application, server) unavailable for the purpose it was designed. There are many ways to make a service unavailable for legitimate users by manipulating network packets, programming, logical, or resources handling vulnerabilities, among others. If a service receives a very large number of requests, it may cease to be available to legitimate users. In the same way, a service may stop if a programming vulnerability is exploited, or the way the service handles resources it uses. Sometimes the attacker can inject and execute arbitrary code while performing a DoS attack in order to access critical information or execute commands on the server. Denial-of-service attacks significantly degrade the service quality experienced by legitimate users. These attacks introduce large response delays, excessive losses, and service interruptions, resulting in direct impact on availability. - https://www.owasp.org/index.php/Denial_of_Service",
		"category_id": "208",
		"category": "Injection",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "6tm0BMaeYeGy70DqGCHkVadL9LK1GBkapX0MsujC9SE87fW5oCA2WG7IS1160F2116CiAIOHa1baGgbI53EtDJHPlg117117",
		"building_block_category_id": "0JGzGhrLZn1ICG8E8g9ivtBda123Z9r5LB1123LHmPkHFKrH7123F6pKSEUUnM3z116CB6TTs8f2Q81ynb7VmmE116rVGZvQ117117",
		"name": "HTTP Request Smuggling",
		"about": "The HTTP Request Smuggling attack explores an incomplete parsing of the submitted data done by an intermediary HTTP system working as a proxy. HTTP Request Smuggling consists of sending a specially formatted HTTP request that will be parsed in a different way by the proxy system and by the final system, so the attacker could smuggle a request to one system without the other being aware of it. This attack makes it possible to exploit other attacks, like Cache Poisoning, Session Hijacking, Cross-site Scripting (XSS) and most importantly, the ability to bypass web application firewall protection. To exploit the HTTP Request Smuggling, some specific conditions must exist, such as the presence of specific proxy system and version such as SunOne Proxy 3.6 (SP4) or FW-1/FP4-R55W beta or an XSS vulnerability in the web server. - https://www.owasp.org/index.php/HTTP_Request_Smugglingrn",
		"category_id": "209",
		"category": "Path Traversal Attack",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "i8lf1VqVbJWvHCmuZMRrCimgfqVA9FuTGeCvlLiTrzXB8nd9QKrpmyU6d0SToaWvf8vzDH7MkQl0MmusNVBBUQ117117",
		"building_block_category_id": "0JGzGhrLZn1ICG8E8g9ivtBda123Z9r5LB1123LHmPkHFKrH7123F6pKSEUUnM3z116CB6TTs8f2Q81ynb7VmmE116rVGZvQ117117",
		"name": "HTTP Response Splitting",
		"about": "HTTP response splitting occurs when: Data enters a web application through an untrusted source, most frequently an HTTP request. The data is included in an HTTP response header sent to a web user without being validated for malicious characters.rnHTTP response splitting is a means to an end, not an end in itself. At its root, the attack is straightforward: an attacker passes malicious data to a vulnerable application, and the application includes the data in an HTTP response header. To mount a successful exploit, the application must allow input that contains CR (carriage return, also given by %0d or \r) and LF (line feed, also given by %0a or \n)characters into the header AND the underlying platform must be vulnerable to the injection of such characters. These characters not only give attackers control of the remaining headers and body of the response the application intends to send, but also allow them to create additional responses entirely under their control. - https://www.owasp.org/index.php/HTTP_Response_Splittingrn",
		"category_id": "209",
		"category": "Path Traversal Attack",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "CYeYTiaZccZ5bdzDMXGdBu8X0FPko6iyZenb123UuLYEqvKobM8VSY93SLCRCykmOSnxsffvkkTsCn7JkIYC8123jQ117117",
		"building_block_category_id": "0JGzGhrLZn1ICG8E8g9ivtBda123Z9r5LB1123LHmPkHFKrH7123F6pKSEUUnM3z116CB6TTs8f2Q81ynb7VmmE116rVGZvQ117117",
		"name": "Traffic Flood",
		"about": "Traffic Flood is a type of DoS attack targeting web servers. The attack explores the way that the TCP connection is managed. The attack consists of the generation of a lot of well-crafted TCP requisitions, with the objective to stop the Web Server or cause a performance decrease. The attack explores a characteristic of the HTTP protocol, opening many connections at the same time to attend a single requisition. This special feature of the http protocol, which consists of opening a TCP connection for every html object and closing it, could be used to make two different kinds of exploitations. The Connect attack is done during the establishment of the connection, and the Closing attack is done during the connection closing. - https://www.owasp.org/index.php/Traffic_floodrnTraffic Flood is a type of DoS attack targeting web servers. The attack explores the way that the TCP connection is managed. The attack consists of the generation of a lot of well-crafted TCP requisitions, with the objective to stop the Web Server or cause a performance decrease. The attack explores a characteristic of the HTTP protocol, opening many connections at the same time to attend a single requisition. This special feature of the http protocol, which consists of opening a TCP connection for every html object and closing it, could be used to make two different kinds of exploitations. The Connect attack is done during the establishment of the connection, and the Closing attack is done during the connection closing. - https://www.owasp.org/index.php/Traffic_floodrn",
		"category_id": "209",
		"category": "Path Traversal Attack",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "3Vh6TfxI79wFMuv116JqMF3wJn2kkta4116Jn8dDqpp2bFch0YA9kI6116pm1t116euBAhFUho4TAg2s3h7NHO7wLBDdQw117117",
		"building_block_category_id": "Bbln1qqlPucFHcA6AtHfgRaCXi96yiDqZy123qTK0nkxin2HgEgc1vnlfhxJmrHhnY4YjIytSkqE116qhoTl7D7ajQ117117",
		"name": "Asymmetric Resource Consumption",
		"about": "Asymmetric resource consumption consists in an attacker forcing a web application to consume excessive resources when the application fails to release, or incorrectly releases, a system resource. - https://www.owasp.org/index.php/Asymmetric_resource_consumption_(amplification)rn",
		"category_id": "210",
		"category": "Probabilistic Technique",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "dDjvHa0123McSOUpf5jm3X2KJkDvEnAvG7123043Jz9im98QbvYCIuhuA7iwMh60MBLM4sVWgLEWPsHSBrntqNtt116g117117",
		"building_block_category_id": "Bbln1qqlPucFHcA6AtHfgRaCXi96yiDqZy123qTK0nkxin2HgEgc1vnlfhxJmrHhnY4YjIytSkqE116qhoTl7D7ajQ117117",
		"name": "Cash Overflow",
		"about": "A Cash Overflow attack is a Denial of Service attack specifically aimed at exceeding the hosting costs for a cloud application, either essentially bankrupting the service owner or exceeding the application cost limits, leading the cloud service provider to disable the application. - https://www.owasp.org/index.php/Cash_Overflowrn",
		"category_id": "210",
		"category": "Probabilistic Technique",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "pCF5YGGRqYBS50M1235X78op123tOCF6OwtiEx9hKa4pBF12331233l3NFqSISc09KsVuKyim0Tb8J57BXczQhue7PPa9A117117",
		"building_block_category_id": "Bbln1qqlPucFHcA6AtHfgRaCXi96yiDqZy123qTK0nkxin2HgEgc1vnlfhxJmrHhnY4YjIytSkqE116qhoTl7D7ajQ117117",
		"name": "Denial of Service",
		"about": "The Denial of Service (DoS) attack is focused on making a resource (site, application, server) unavailable for the purpose it was designed. There are many ways to make a service unavailable for legitimate users by manipulating network packets, programming, logical, or resources handling vulnerabilities, among others. If a service receives a very large number of requests, it may cease to be available to legitimate users. In the same way, a service may stop if a programming vulnerability is exploited, or the way the service handles resources it uses. Sometimes the attacker can inject and execute arbitrary code while performing a DoS attack in order to access critical information or execute commands on the server. Denial-of-service attacks significantly degrade the service quality experienced by legitimate users. These attacks introduce large response delays, excessive losses, and service interruptions, resulting in direct impact on availability. - https://www.owasp.org/index.php/Denial_of_Service",
		"category_id": "210",
		"category": "Probabilistic Technique",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "4EaFe9BQaowmvbp1230j123v6uea116zCq6uB6b116Tr89B1KMKZuc7HzHccSs8kvpseUz1ZSVJlsexf1vynM1wUfuOMBQ117117",
		"building_block_category_id": "MQk68ecz2U2JkbO9xOx8azXriF3nfydGvyOJM72YKTjkbasE132PcPrL10p1TxWsO9a4Ut4123R5MJdqVqNGJg3Q117117",
		"name": "Comment Injection Attack",
		"about": "Comments injected into an application through input can be used to compromise a system. As data is parsed, an injected/malformed comment may cause the process to take unexpected actions that result in an attack. - https://www.owasp.org/index.php/Comment_Injection_Attackrn",
		"category_id": "211",
		"category": "Protocol Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "boopriz2XL7qnOyctof9nSB5HK6jVxW116mY123xZUXWAwxa2Q3hof7TVbFnzrjy116KIHrZdB2c5kf116xrGbU19hUFMA117117",
		"building_block_category_id": "MQk68ecz2U2JkbO9xOx8azXriF3nfydGvyOJM72YKTjkbasE132PcPrL10p1TxWsO9a4Ut4123R5MJdqVqNGJg3Q117117",
		"name": "Custom Special Character Injection",
		"about": "The software does not properly filter or quote special characters or reserved words that are used in a custom or proprietary language or representation that is used by the product. That allows attackers to modify the syntax, content, or commands before they are processed by the end system. - https://www.owasp.org/index.php/Custom_Special_Character_Injectionrn",
		"category_id": "211",
		"category": "Protocol Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "YLK123c8YeEoryKYORTLYAyEGWEzzYCrKqpxnB08gbMru116G43xSEU0AoBuEHsFhPdi7O8bTtP1235PcWZjeZzqeeKg117117",
		"building_block_category_id": "MQk68ecz2U2JkbO9xOx8azXriF3nfydGvyOJM72YKTjkbasE132PcPrL10p1TxWsO9a4Ut4123R5MJdqVqNGJg3Q117117",
		"name": "Double Encoding",
		"about": "This attack technique consists of encoding user request parameters twice in hexadecimal format in order to bypass security controls or cause unexpected behavior from the application. It's possible because the webserver accepts and processes client requests in many encoded forms. By using double encoding it's possible to bypass security filters that only decode user input once. The second decoding process is executed by the backend platform or modules that properly handle encoded data, but don't have the corresponding security checks in place. Attackers can inject double encoding in pathnames or query strings to bypass the authentication schema and security filters in use by the web application. - https://www.owasp.org/index.php/Double_Encodingn",
		"category_id": "211",
		"category": "Protocol Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "BqmTuA116taVHNptxiraLaV1MOdbl07SDwm7FU20RPSptJ4oVY0ZOZnjgsRome2xAqjGl2LK64I7zkZr5FhSYeCQ117117",
		"building_block_category_id": "MQk68ecz2U2JkbO9xOx8azXriF3nfydGvyOJM72YKTjkbasE132PcPrL10p1TxWsO9a4Ut4123R5MJdqVqNGJg3Q117117",
		"name": "Forced Browsing",
		"about": "Forced browsing is an attack where the aim is to enumerate and access resources that are not referenced by the application, but are still accessible. An attacker can use Brute Force techniques to search for unlinked contents in the domain directory, such as temporary directories and files, and old backup and configuration files. These resources may store sensitive information about web applications and operational systems, such as source code, credentials, internal network addressing, and so on, thus being considered a valuable resource for intruders. This attack is performed manually when the application index directories and pages are based on number generation or predictable values, or using automated tools for common files and directory names. This attack is also known as Predictable Resource Location, File Enumeration, Directory Enumeration, and Resource Enumeration.rn",
		"category_id": "211",
		"category": "Protocol Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "i5DrBj116ijkm1z5zxnYqWSP3muyZiznibI5Won20116rm2Lj116x3aGOCeyT6m91233iORiMkE3E4jCJ3ZpyvCsZS123PZw117117",
		"building_block_category_id": "MQk68ecz2U2JkbO9xOx8azXriF3nfydGvyOJM72YKTjkbasE132PcPrL10p1TxWsO9a4Ut4123R5MJdqVqNGJg3Q117117",
		"name": "Path Traversal",
		"about": "A Path Traversal attack aims to access files and directories that are stored outside the web root folder. By browsing the application, the attacker looks for absolute links to files stored on the web server. By manipulating variables that reference files with dot-dot-slash (../) sequences and its variations, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration and critical system files, limited by system operational access control. The attacker uses ../ sequences to move up to root directory, thus permitting navigation through the file system. -  - https://www.owasp.org/index.php/Path_Traversaln",
		"category_id": "211",
		"category": "Protocol Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "VYLzy7123EOcD116CjBcC18iktZLeKMVR123jctroLEzNHGeuBZ76DMaO123iFJ0f71cdurXwAE6O6UO8yBhRSdS3j6JYw117117",
		"building_block_category_id": "MQk68ecz2U2JkbO9xOx8azXriF3nfydGvyOJM72YKTjkbasE132PcPrL10p1TxWsO9a4Ut4123R5MJdqVqNGJg3Q117117",
		"name": "Relative Path Traversal",
		"about": "This attack is a variant of Path Traversal and can be exploited when the application accepts the use of relative traversal sequences such as "../". - https://www.owasp.org/index.php/Relative_Path_Traversalrn",
		"category_id": "211",
		"category": "Protocol Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "A0k116Y116bLafG116bn86gF2zenSnlxk7kEYZ1IddmgHbweQj2116K123w5zihcs58F6116j1CP3Hy4w6Rl123f80i7123YATYnog117117",
		"building_block_category_id": "MQk68ecz2U2JkbO9xOx8azXriF3nfydGvyOJM72YKTjkbasE132PcPrL10p1TxWsO9a4Ut4123R5MJdqVqNGJg3Q117117",
		"name": "Repudiation Attack",
		"about": "A repudiation attack happens when an application or system does not adopt controls to properly track and log users' actions, thus permitting malicious manipulation or forging the identification of new actions. This attack can be used to change the authoring information of actions executed by a malicious user in order to log wrong data to log files. Its usage can be extended to general data manipulation in the name of others, in a similar manner as spoofing mail messages. If this attack takes place, the data stored on log files can be considered invalid or misleading. - https://www.owasp.org/index.php/Repudiation_Attackrn",
		"category_id": "211",
		"category": "Protocol Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "LFDRmrQ3caVU54qQokbD3l0UU2VS116ksGJke9MHk3QAU57amcI2eFvt2OAh7Z4c8OzsrrpuqCSWv2opr5GuUpCw117117",
		"building_block_category_id": "MQk68ecz2U2JkbO9xOx8azXriF3nfydGvyOJM72YKTjkbasE132PcPrL10p1TxWsO9a4Ut4123R5MJdqVqNGJg3Q117117",
		"name": "Setting Manipulation",
		"about": "This attack aims to modify application settings in order to cause misleading data or advantages on the attacker's behalf. He may manipulate values in the system and manage specific user resources of the application or affect its functionalities. An attacker can exploit several functionalities of the application using this attack technique, but it would not possible to describe all the ways of exploration, due to innumerable options that attacker may use to control the system values. Using this attack technique, it is possible to manipulate settings by changing the application functions, such as calls to the database, blocking access to external libraries, and/or modification log files. - https://www.owasp.org/index.php/Setting_Manipulationrn",
		"category_id": "211",
		"category": "Protocol Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "Kwyg3TpqwRWKDAbnPvpD123xOuMDve7erjzfOz0rhsv3x3g7IBmal79yE72QvaAzR4nH9ekFbqm9fV7HgCVLSvVA117117",
		"building_block_category_id": "MQk68ecz2U2JkbO9xOx8azXriF3nfydGvyOJM72YKTjkbasE132PcPrL10p1TxWsO9a4Ut4123R5MJdqVqNGJg3Q117117",
		"name": "Unicode Encoding",
		"about": "The attack aims to explore flaws in the decoding mechanism implemented on applications when decoding Unicode data format. An attacker can use this technique to encode certain characters in the URL to bypass application filters, thus accessing restricted resources on the Web server or to force browsing to protected pages. - https://www.owasp.org/index.php/Unicode_Encodingrn",
		"category_id": "211",
		"category": "Protocol Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "1ABpCUXFpvLpBWsLLRqJgAcD1237joOURgstWOmm6zZz777HFA0ovsKtDqkldkEKeHCNTckhTBfp1236116GJG99Ae6g117117",
		"building_block_category_id": "oxHUusiJC4XOaMTFn5gzHu01fYgrorRTIz8UCbK123IsyvfnTGRpt8oDfBUIJh7FTzcii5rp0ki8Q4x4TjlrTi7g117117",
		"name": "Cash Overflow",
		"about": "A Cash Overflow attack is a Denial of Service attack specifically aimed at exceeding the hosting costs for a cloud application, either essentially bankrupting the service owner or exceeding the application cost limits, leading the cloud service provider to disable the application. - https://www.owasp.org/index.php/Cash_Overflowrn",
		"category_id": "212",
		"category": "Resource Depletion",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "p0j2gfcY8gkLZPBYfGqwZWEJ97xAasb3123bi123YW9MBbnqmWGN4z91116E116tmjRGeC5Mmrj5M12392tiO4DSlK7IxxSw117117",
		"building_block_category_id": "oxHUusiJC4XOaMTFn5gzHu01fYgrorRTIz8UCbK123IsyvfnTGRpt8oDfBUIJh7FTzcii5rp0ki8Q4x4TjlrTi7g117117",
		"name": "Cross-Site Request Forgery (CSRF)",
		"about": "Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker's choosing. If the victim is a normal user, a successful CSRF attack can force the user to perform state changing requests like transferring funds, changing their email address, and so forth. If the victim is an administrative account, CSRF can compromise the entire web application. - https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)rn",
		"category_id": "212",
		"category": "Resource Depletion",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "W20YSWUaCwIF0116HJGmGluiSVjAUloHRa57v123Cx69aXFerkiPLs97Q123TdAe3JS30jWNac8bG3qTTj1zj6QLtM3w117117",
		"building_block_category_id": "oxHUusiJC4XOaMTFn5gzHu01fYgrorRTIz8UCbK123IsyvfnTGRpt8oDfBUIJh7FTzcii5rp0ki8Q4x4TjlrTi7g117117",
		"name": "Man-in-the-Middle Attack",
		"about": "The man-in-the middle attack intercepts a communication between two systems. For example, in an http transaction the target is the TCP connection between client and server. Using different techniques, the attacker splits the original TCP connection into 2 new connections, one between the client and the attacker and the other between the attacker and the server, as shown in figure 1. Once the TCP connection is intercepted, the attacker acts as a proxy, being able to read, insert and modify the data in the intercepted communication. - https://www.owasp.org/index.php/Man-in-the-middle_attackrn",
		"category_id": "212",
		"category": "Resource Depletion",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "fncWwNafu2PU0hmdvCJ21167xXBul4ggR1EcWaEifzJrcb0jUupvtHY2y123d44Fbv9BOgNpkLGS116VoPqcMhPiyxqA117117",
		"building_block_category_id": "9brywhNvaO7JeYIL123CfY38p8lLx123gDPwhPV6cp6CcDwFiGT3123G40AON2coEQUNs2H8soGL7HtUwcUwW4os8apQ117117",
		"name": "Certification ",
		"about": "Providing a system for validating and certifying an APIs security, scanning the surface area and providing guarantees that the endpoint(s) are secure.rn",
		"category_id": "213",
		"category": "Resource Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "gkvmMNxErNpGbAJt116CJxRd85lvFw3LCs7HX116yzBDApc1238JMu116jls1tAivDRgWxZWgdtStAxaRz1M5S0uTa520w117117",
		"building_block_category_id": "9brywhNvaO7JeYIL123CfY38p8lLx123gDPwhPV6cp6CcDwFiGT3123G40AON2coEQUNs2H8soGL7HtUwcUwW4os8apQ117117",
		"name": "Security Visualization",
		"about": "Allowing API owners with reports and charting, allowing them to visualize the surface area and security of an API. Providing a single way to see all the potential attacks, vulnerabilities, and what is being done about security overall.rn",
		"category_id": "213",
		"category": "Resource Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "K9ew0w7vCzbiHHB4GpY1FY2Zf6gf4pbFCRDm0TNK2Mr9mHPTGVp7zPtzMooZCbEqr3X8xkqh21zlJMsrKBg2Yg117117",
		"building_block_category_id": "9brywhNvaO7JeYIL123CfY38p8lLx123gDPwhPV6cp6CcDwFiGT3123G40AON2coEQUNs2H8soGL7HtUwcUwW4os8apQ117117",
		"name": "Compliance & Auditing Reporting",
		"about": "Providing a specific interface for auditors and compliance officers to see what security has been applied to any interface. The reporting should provide details that are in alignment with whatever standard is being applied to the industry, as well as standard security approaches.rn",
		"category_id": "213",
		"category": "Resource Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "MVuAfh116CkCcqe4LJI3xr6cNGFRT1233Ay4vhC42kf0YnqHjmhF54rLzcOpeF6p123b9htqWSmF1rs25DMjRKevKpbw117117",
		"building_block_category_id": "9brywhNvaO7JeYIL123CfY38p8lLx123gDPwhPV6cp6CcDwFiGT3123G40AON2coEQUNs2H8soGL7HtUwcUwW4os8apQ117117",
		"name": "Bug Bounty Program",
		"about": "Provide a platform for running a bug bounty program, that allows API providers to crowdsource the discovery, and review of an API, providing a potentially friendly way to handle security before bad actors can step in and find vulnerabilities.rn",
		"category_id": "213",
		"category": "Resource Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "gYoCvRkUaaJxEoWOzvXx4WHZlhrnLoZ123Ab123CzGqjA81168fkpyMVs116b2g2K2SnyleJB116lTwXcBGBRH4LUhv8RR7w117117",
		"building_block_category_id": "9brywhNvaO7JeYIL123CfY38p8lLx123gDPwhPV6cp6CcDwFiGT3123G40AON2coEQUNs2H8soGL7HtUwcUwW4os8apQ117117",
		"name": "Endpoint Tagging",
		"about": "Allow for the tagging and organizing of APIs into specific groups for scanning, monitoring, and reviewing of APIs. Giving providers an easy way to organize so that they can be secured, and understood.rn",
		"category_id": "213",
		"category": "Resource Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "omG3Q9X5XEsCCIwVqz116RvHw5k1168saul123Jm5123iBiKv3kCpb116ESQvgq9m123FdKGMtJ123lpab81q4kWsE14kqM1kxew117117",
		"building_block_category_id": "9brywhNvaO7JeYIL123CfY38p8lLx123gDPwhPV6cp6CcDwFiGT3123G40AON2coEQUNs2H8soGL7HtUwcUwW4os8apQ117117",
		"name": "Intrusion Correlation",
		"about": "Providing the ability to connect the dots between various security attacks and intrusions, providing insight into patterns used by attackers, locations of attacks, and other details that might help security.rn",
		"category_id": "213",
		"category": "Resource Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "Yg4GMU5O6v7Ml9mXkFtZnGs1OABXLW9KZNxiv63ONSQ9q1fezSqaxgTC0y1231Rct2hicOYsS116OtZGbxtF6123Fz4w117117",
		"building_block_category_id": "9brywhNvaO7JeYIL123CfY38p8lLx123gDPwhPV6cp6CcDwFiGT3123G40AON2coEQUNs2H8soGL7HtUwcUwW4os8apQ117117",
		"name": "Risk Scoring",
		"about": "Offer a single scoring approach to be able to score attacks, based upon existing understanding of the space, but also historical data, providing a clear way to rank, and understand how vulnerabilities, and attacks could affect operations.rn",
		"category_id": "213",
		"category": "Resource Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	},
	{
		"building_block_id": "x1239F123BZZ9L31VX2lWpzLBtYadBbwVDxKBejwaob0TxMatxnKy7GHfRQqQL3Sr9RtsqByEYUXdNOgga1YRogMdg117117",
		"building_block_category_id": "9brywhNvaO7JeYIL123CfY38p8lLx123gDPwhPV6cp6CcDwFiGT3123G40AON2coEQUNs2H8soGL7HtUwcUwW4os8apQ117117",
		"name": "Publish Your Page",
		"about": "Publishing a single page that covers what the security approaches are for a platform, providing as much detail as possible about what practices are employed, what the schedule looks like, and what results of security history is.",
		"category_id": "213",
		"category": "Resource Manipulation",
		"image": "",
		"image_width": "100",
		"sort_order": "0"
	}
]